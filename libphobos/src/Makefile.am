# GDC -- D front-end for GCC
# Copyright (C) 2004 David Friedman
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

# Include D build rules
include $(top_srcdir)/d_rules.am

# Make sure GDC can find libdruntime and libphobos include files
D_EXTRA_DFLAGS=-nostdinc -pipe -Wno-deprecated -I $(srcdir) \
	-I $(top_srcdir)/libdruntime -I ../libdruntime -I .

# C flags for zlib compilation
AM_CFLAGS=@DEFS@ -I. -I$(srcdir)/../libdruntime/gcc -I$(top_srcdir)/../zlib

# Install all D files
ALL_PHOBOS_INSTALL_DSOURCES = $(PHOBOS_DSOURCES) $(PHOBOS_DSOURCES_STDC) \
	$(PHOBOS_DSOURCES_FREEBSD) $(PHOBOS_DSOURCES_OSX) \
	$(PHOBOS_DSOURCES_WINDOWS) $(PHOBOS_DSOURCES_LINUX)


# Setup source files depending on configure
ALL_PHOBOS_COMPILE_DSOURCES = $(PHOBOS_DSOURCES) $(PHOBOS_DSOURCES_STDC)
# OS specific sources
if DRUNTIME_OS_DARWIN
    ALL_PHOBOS_COMPILE_DSOURCES += $(PHOBOS_DSOURCES_OSX)
endif
if DRUNTIME_OS_BSD
    ALL_PHOBOS_COMPILE_DSOURCES += $(PHOBOS_DSOURCES_FREEBSD)
endif
if DRUNTIME_OS_LINUX
    ALL_PHOBOS_COMPILE_DSOURCES += $(PHOBOS_DSOURCES_LINUX)
endif
if DRUNTIME_OS_MINGW
    ALL_PHOBOS_COMPILE_DSOURCES += $(PHOBOS_DSOURCES_WINDOWS)
endif

ALL_PHOBOS_SOURCES = $(ALL_PHOBOS_COMPILE_DSOURCES)
PHOBOS_TEST_LOBJECTS = $(ALL_PHOBOS_COMPILE_DSOURCES:.d=.t.lo)
REAL_PHOBOS_TEST_OBJECTS = $(ALL_PHOBOS_COMPILE_DSOURCES:.d=.t.o)
# Workaround issue #
PHOBOS_TEST_OBJECTS = $(filter-out std/net/curl.t.o std/base64.t.o, \
    $(REAL_PHOBOS_TEST_OBJECTS))

# Main library build definitions
if DRUNTIME_ZLIB_SYSTEM
    ZLIB_LIB = -lz
    ZLIB_SRC =
else
    ZLIB_LIB =
    ZLIB_SRC = $(ZLIB_CSOURCES)
endif
check_PROGRAMS =
if ENABLE_SHARED
    check_LTLIBRARIES = libgphobos2_t.la
    check_PROGRAMS += unittest
endif
if ENABLE_STATIC
    check_PROGRAMS += unittest_static
endif

toolexeclib_LTLIBRARIES = libgphobos2.la
libgphobos2_la_SOURCES = $(ALL_PHOBOS_SOURCES) $(ZLIB_SRC)
libgphobos2_la_LIBTOOLFLAGS = --tag=D
libgphobos2_la_LDFLAGS = -Xcompiler -nophoboslib -release $(RELEASE_VER) -static
libgphobos2_la_LIBADD = ../libdruntime/libgdruntime.la $(ZLIB_LIB)

# For static unittest, link objects directly
unittest_static_SOURCES = ../libdruntime/test_runner.d $(ZLIB_SRC)
unittest_static_LIBTOOLFLAGS = --tag=D
unittest_static_LDFLAGS = -Xcompiler -nophoboslib -static-libtool-libs
unittest_static_LDADD = $(PHOBOS_TEST_OBJECTS) $(ZLIB_LIB) \
    ../libdruntime/libgdruntime.la
EXTRA_unittest_static_DEPENDENCIES = $(PHOBOS_TEST_OBJECTS)

# For unittest with dynamic library
libgphobos2_t_la_SOURCES = $(ZLIB_SRC)
libgphobos2_t_la_LIBTOOLFLAGS = --tag=D
libgphobos2_t_la_LDFLAGS = -Xcompiler -nophoboslib -rpath /foo -shared
libgphobos2_t_la_LIBADD = $(PHOBOS_TEST_LOBJECTS) $(ZLIB_LIB) \
    ../libdruntime/libgdruntime.la
EXTRA_libgphobos2_t_la_DEPENDENCIES = $(PHOBOS_TEST_LOBJECTS)

# For unittest
unittest_SOURCES = ../libdruntime/test_runner.d
unittest_LIBTOOLFLAGS = --tag=D
unittest_LDFLAGS = -Xcompiler -nophoboslib -shared
unittest_LDADD = libgphobos2_t.la ../libdruntime/libgdruntime.la -lcurl

# Extra install and clean rules.
# This does not delete the .libs/.t.o files, but deleting
# the .lo is good enough to rerun the rules
clean-local:
	rm -f $(PHOBOS_TEST_LOBJECTS)
	rm -f $(PHOBOS_TEST_OBJECTS)

check-local:
if ENABLE_STATIC
	./unittest_static$(EXEEXT)
endif
if ENABLE_SHARED
	./unittest$(EXEEXT)
endif

# Handles generated files as well
install-data-local:
	for file in $(ALL_PHOBOS_INSTALL_DSOURCES); do \
	  if test -f $$file; then \
	    $(INSTALL_HEADER) -D $$file $(DESTDIR)$(gdc_include_dir)/$$file ; \
	  else \
	    $(INSTALL_HEADER) -D $(srcdir)/$$file \
	      $(DESTDIR)$(gdc_include_dir)/$$file ; \
	  fi ; \
	done

# Zlib sources when not using system libz
ZLIB_CSOURCES=$(top_srcdir)/../zlib/adler32.c $(top_srcdir)/../zlib/compress.c \
	$(top_srcdir)/../zlib/crc32.c $(top_srcdir)/../zlib/deflate.c \
	$(top_srcdir)/../zlib/gzclose.c $(top_srcdir)/../zlib/gzlib.c \
	$(top_srcdir)/../zlib/gzread.c $(top_srcdir)/../zlib/gzwrite.c \
	$(top_srcdir)/../zlib/infback.c $(top_srcdir)/../zlib/inffast.c \
	$(top_srcdir)/../zlib/inflate.c $(top_srcdir)/../zlib/inftrees.c \
	$(top_srcdir)/../zlib/trees.c $(top_srcdir)/../zlib/uncompr.c \
	$(top_srcdir)/../zlib/zutil.c

# Source file definitions. Boring stuff, auto-generated with
# https://gist.github.com/jpf91/8744acebc9dcf1e9d1a35cdff20afbb2
# Can't use wildcards here:
# https://www.gnu.org/software/automake/manual/html_node/Wildcards.html
PHOBOS_DSOURCES = etc/c/curl.d etc/c/sqlite3.d etc/c/zlib.d \
	std/algorithm/comparison.d std/algorithm/internal.d \
	std/algorithm/iteration.d std/algorithm/mutation.d \
	std/algorithm/package.d std/algorithm/searching.d \
	std/algorithm/setops.d std/algorithm/sorting.d std/array.d std/ascii.d \
	std/base64.d std/bigint.d std/bitmanip.d std/compiler.d std/complex.d \
	std/concurrency.d std/container/array.d std/container/binaryheap.d \
	std/container/dlist.d std/container/package.d std/container/rbtree.d \
	std/container/slist.d std/container/util.d std/conv.d std/cstream.d \
	std/csv.d std/datetime.d std/demangle.d std/digest/crc.d \
	std/digest/digest.d std/digest/md.d std/digest/ripemd.d \
	std/digest/sha.d std/encoding.d std/exception.d \
	std/experimental/logger/core.d std/experimental/logger/filelogger.d \
	std/experimental/logger/multilogger.d \
	std/experimental/logger/nulllogger.d std/experimental/logger/package.d \
	std/file.d std/format.d std/functional.d std/getopt.d \
	std/internal/cstring.d std/internal/digest/sha_SSSE3.d \
	std/internal/math/biguintcore.d std/internal/math/biguintnoasm.d \
	std/internal/math/biguintx86.d std/internal/math/errorfunction.d \
	std/internal/math/gammafunction.d std/internal/processinit.d \
	std/internal/scopebuffer.d std/internal/test/dummyrange.d \
	std/internal/unicode_comp.d std/internal/unicode_decomp.d \
	std/internal/unicode_grapheme.d std/internal/unicode_norm.d \
	std/internal/unicode_tables.d std/internal/windows/advapi32.d \
	std/json.d std/math.d std/mathspecial.d std/mmfile.d std/net/curl.d \
	std/net/isemail.d std/numeric.d std/outbuffer.d std/parallelism.d \
	std/path.d std/process.d std/random.d std/range/interfaces.d \
	std/range/package.d std/range/primitives.d \
	std/regex/internal/backtracking.d std/regex/internal/generator.d \
	std/regex/internal/ir.d std/regex/internal/kickstart.d \
	std/regex/internal/parser.d std/regex/internal/tests.d \
	std/regex/internal/thompson.d std/regex/package.d std/signals.d \
	std/socket.d std/socketstream.d std/stdint.d std/stdio.d \
	std/stdiobase.d std/stream.d std/string.d std/syserror.d std/system.d \
	std/traits.d std/typecons.d std/typelist.d std/typetuple.d std/uni.d \
	std/uri.d std/utf.d std/uuid.d std/variant.d std/windows/charset.d \
	std/windows/iunknown.d std/windows/registry.d std/windows/syserror.d \
	std/xml.d std/zip.d std/zlib.d

PHOBOS_DSOURCES_STDC = std/c/fenv.d std/c/locale.d std/c/math.d \
	std/c/process.d std/c/stdarg.d std/c/stddef.d std/c/stdio.d \
	std/c/stdlib.d std/c/string.d std/c/time.d std/c/wcharh.d

PHOBOS_DSOURCES_FREEBSD = std/c/freebsd/socket.d

PHOBOS_DSOURCES_OSX = std/c/osx/socket.d

PHOBOS_DSOURCES_WINDOWS = std/c/windows/com.d std/c/windows/stat.d \
	std/c/windows/windows.d std/c/windows/winsock.d

PHOBOS_DSOURCES_LINUX = std/c/linux/linux.d std/c/linux/linuxextern.d \
	std/c/linux/pthread.d std/c/linux/socket.d std/c/linux/termios.d \
	std/c/linux/tipc.d
