// intrinsics.def -- D frontend for GCC.
// Copyright (C) 2014 Free Software Foundation, Inc.

// GCC is free software; you can redistribute it and/or modify it under
// the terms of the GNU General Public License as published by the Free
// Software Foundation; either version 3, or (at your option) any later
// version.

// GCC is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// for more details.

// You should have received a copy of the GNU General Public License
// along with GCC; see the file COPYING3.  If not see
// <http://www.gnu.org/licenses/>.

// Definitions for intrinsics of the D compiler.

// Define all D intrinsic functions.
// The first parameter:
//  CODE - The enum code used to refer this intrinsic.
// The second parameter:
//  ALIAS - The enum code used to refer the function DECL_FUNCTION_CODE,
//  if there are multiple modules or decos for a single intrinsic, they
//  would all refer to this code.
// The third parameter:
//  NAME - The name of the intrinsic.
// The fourth parameter:
//  MODULE - The list of modules which the intrinsic could belong to.
// The fifth parameter:
//  DECO - the signature decoration of the intrinsic.
//  Template intrinsics reserve this for the template parameter strings.

// Helper macros.

// Modules
#define CORE_BITOP      "core.bitop"
#define CORE_CHECKEDINT "core.checkedint"
#define CORE_VARARG     "core.stdc.stdarg"
#define CORE_MATH	"core.math"
#define STD_MATH	"std.math"

// Attribute decorations
#define SAFE_NOGC_PURE_NOTHROW	    "NaNbNiNf"	// @safe @nogc pure nothrow function
#define SAFE_NOGC_NOTHROW	    "NbNiNf"	// @safe @nogc nothrow function
#define SAFE_PURE_NOTHROW	    "NaNbNf"	// @safe pure nothrow function
#define NOGC_PURE_NOTHROW	    "NaNbNi"	// @system @nogc pure nothrow function
#define PURE_NOTHROW		    "NaNb"	// @system pure nothrow function
#define SYSTEM			    ""		// @system

// Parameter and return types
#define BOOL	"b"	// bool
#define UBYTE	"h"	// ubyte
#define USHORT	"t"	// ushort
#define INT	"i"	// int
#define UINT	"k"	// uint
#define LONG	"l"	// long
#define ULONG	"m"	// ulong
#define FLOAT	"f"	// float
#define DOUBLE	"d"	// double
#define REAL	"e"	// real
#define VOID	"v"	// void

#define POINTER(T)  "P" T	// (T)*
#define REF(T)	    "K" T	// ref(T)

// Helpers for building function signatures.
#define P1(T1)		T1
#define P2(T1, T2)	T1 T2
#define P3(T1, T2, T3)	T1 T2 T3
#define FN(P, R, A)	"F" A P "Z" R

// core.bitop intrinsics

DEF_D_INTRINSIC (BSF, BSF, "bsf", CORE_BITOP, FN(P1(UINT), INT, SAFE_NOGC_PURE_NOTHROW))
DEF_D_INTRINSIC (BSR, BSR, "bsr", CORE_BITOP, FN(P1(UINT), INT, SAFE_NOGC_PURE_NOTHROW))
DEF_D_INTRINSIC (BTC, BTC, "btc", CORE_BITOP, FN(P2(POINTER(UINT), UINT), INT, NOGC_PURE_NOTHROW))
DEF_D_INTRINSIC (BTR, BTR, "btr", CORE_BITOP, FN(P2(POINTER(UINT), UINT), INT, NOGC_PURE_NOTHROW))
DEF_D_INTRINSIC (BTS, BTS, "bts", CORE_BITOP, FN(P2(POINTER(UINT), UINT), INT, NOGC_PURE_NOTHROW))
DEF_D_INTRINSIC (BSF64, BSF, "bsf", CORE_BITOP, FN(P1(ULONG), INT, SAFE_NOGC_PURE_NOTHROW))
DEF_D_INTRINSIC (BSR64, BSR, "bsr", CORE_BITOP, FN(P1(ULONG), INT, SAFE_NOGC_PURE_NOTHROW))
DEF_D_INTRINSIC (BTC64, BTC, "btc", CORE_BITOP, FN(P2(POINTER(ULONG), ULONG), INT, NOGC_PURE_NOTHROW))
DEF_D_INTRINSIC (BTR64, BTR, "btr", CORE_BITOP, FN(P2(POINTER(ULONG), ULONG), INT, NOGC_PURE_NOTHROW))
DEF_D_INTRINSIC (BTS64, BTS, "bts", CORE_BITOP, FN(P2(POINTER(ULONG), ULONG), INT, NOGC_PURE_NOTHROW))
DEF_D_INTRINSIC (BSWAP, BSWAP, "bswap", CORE_BITOP, FN(P1(UINT), UINT, SAFE_NOGC_PURE_NOTHROW))
DEF_D_INTRINSIC (VSTORE, VSTORE, "volatileStore", CORE_BITOP, FN(P2(POINTER(UBYTE), UBYTE), VOID, SAFE_NOGC_NOTHROW))
DEF_D_INTRINSIC (VSTORE16, VSTORE, "volatileStore", CORE_BITOP, FN(P2(POINTER(USHORT), USHORT), VOID, SAFE_NOGC_NOTHROW))
DEF_D_INTRINSIC (VSTORE32, VSTORE, "volatileStore", CORE_BITOP, FN(P2(POINTER(UINT), UINT), VOID, SAFE_NOGC_NOTHROW))
DEF_D_INTRINSIC (VSTORE64, VSTORE, "volatileStore", CORE_BITOP, FN(P2(POINTER(ULONG), ULONG), VOID, SAFE_NOGC_NOTHROW))
DEF_D_INTRINSIC (VLOAD, VLOAD, "volatileLoad", CORE_BITOP, FN(P1(POINTER(UBYTE)), UBYTE, SAFE_NOGC_NOTHROW))
DEF_D_INTRINSIC (VLOAD16, VLOAD, "volatileLoad", CORE_BITOP, FN(P1(POINTER(USHORT)), USHORT, SAFE_NOGC_NOTHROW))
DEF_D_INTRINSIC (VLOAD32, VLOAD, "volatileLoad", CORE_BITOP, FN(P1(POINTER(UINT)), UINT, SAFE_NOGC_NOTHROW))
DEF_D_INTRINSIC (VLOAD64, VLOAD, "volatileLoad", CORE_BITOP, FN(P1(POINTER(ULONG)), ULONG, SAFE_NOGC_NOTHROW))

// core.checkedint intrinsics

DEF_D_INTRINSIC (ADDS, ADDS, "adds", CORE_CHECKEDINT, FN(P3(INT, INT, REF(BOOL)), INT, SAFE_NOGC_PURE_NOTHROW))
DEF_D_INTRINSIC (ADDSL, ADDSL, "adds", CORE_CHECKEDINT, FN(P3(LONG, LONG, REF(LONG)), LONG, SAFE_NOGC_PURE_NOTHROW))
DEF_D_INTRINSIC (ADDU, ADDU, "addu", CORE_CHECKEDINT, FN(P3(UINT, UINT, REF(BOOL)), UINT, SAFE_NOGC_PURE_NOTHROW))
DEF_D_INTRINSIC (ADDUL, ADDUL, "addu", CORE_CHECKEDINT, FN(P3(ULONG, ULONG, REF(BOOL)), ULONG, SAFE_NOGC_PURE_NOTHROW))
DEF_D_INTRINSIC (SUBS, SUBS, "subs", CORE_CHECKEDINT, FN(P3(INT, INT, REF(BOOL)), INT, SAFE_NOGC_PURE_NOTHROW))
DEF_D_INTRINSIC (SUBSL, SUBSL, "subs", CORE_CHECKEDINT, FN(P3(LONG, LONG, REF(BOOL)), LONG, SAFE_NOGC_PURE_NOTHROW))
DEF_D_INTRINSIC (SUBU, SUBU, "subu", CORE_CHECKEDINT, FN(P3(UINT, UINT, REF(BOOL)), UINT, SAFE_NOGC_PURE_NOTHROW))
DEF_D_INTRINSIC (SUBUL, SUBUL, "subu", CORE_CHECKEDINT, FN(P3(ULONG, ULONG, REF(BOOL)), ULONG, SAFE_NOGC_PURE_NOTHROW))
DEF_D_INTRINSIC (MULS, MULS, "muls", CORE_CHECKEDINT, FN(P3(INT, INT, REF(BOOL)), INT, SAFE_NOGC_PURE_NOTHROW))
DEF_D_INTRINSIC (MULSL, MULSL, "muls", CORE_CHECKEDINT, FN(P3(LONG, LONG, REF(BOOL)), LONG, SAFE_NOGC_PURE_NOTHROW))
DEF_D_INTRINSIC (MULU, MULU, "mulu", CORE_CHECKEDINT, FN(P3(UINT, UINT, REF(BOOL)), UINT, SAFE_NOGC_PURE_NOTHROW))
DEF_D_INTRINSIC (MULUL, MULUL, "mulu", CORE_CHECKEDINT, FN(P3(ULONG, ULONG, REF(BOOL)), ULONG, SAFE_NOGC_PURE_NOTHROW))
DEF_D_INTRINSIC (NEGS, NEGS, "negs", CORE_CHECKEDINT, FN(P2(INT, REF(BOOL)), INT, SAFE_NOGC_PURE_NOTHROW))
DEF_D_INTRINSIC (NEGSL, NEGSL, "negs", CORE_CHECKEDINT, FN(P2(LONG, REF(BOOL)), LONG, SAFE_NOGC_PURE_NOTHROW))

// core.math intrinsics

DEF_D_INTRINSIC (COS, COS, "cos", CORE_MATH, FN(P1(REAL), REAL, SAFE_NOGC_PURE_NOTHROW))
DEF_D_INTRINSIC (FABS, FABS, "fabs", CORE_MATH, FN(P1(REAL), REAL, SAFE_NOGC_PURE_NOTHROW))
DEF_D_INTRINSIC (LDEXP, LDEXP, "ldexp", CORE_MATH, FN(P2(REAL, INT), REAL, SAFE_NOGC_PURE_NOTHROW))
DEF_D_INTRINSIC (RINT, RINT, "rint", CORE_MATH, FN(P1(REAL), REAL, SAFE_NOGC_PURE_NOTHROW))
DEF_D_INTRINSIC (RNDTOL, RNDTOL, "rndtol", CORE_MATH, FN(P1(REAL), LONG, SAFE_NOGC_PURE_NOTHROW))
DEF_D_INTRINSIC (SIN, SIN, "sin", CORE_MATH, FN(P1(REAL), REAL, SAFE_NOGC_PURE_NOTHROW))
DEF_D_INTRINSIC (SQRTF, SQRTF, "sqrt", CORE_MATH, FN(P1(FLOAT), FLOAT, SAFE_NOGC_PURE_NOTHROW))
DEF_D_INTRINSIC (SQRT, SQRT, "sqrt", CORE_MATH, FN(P1(DOUBLE), DOUBLE, SAFE_NOGC_PURE_NOTHROW))
DEF_D_INTRINSIC (SQRTL, SQRTL, "sqrt", CORE_MATH, FN(P1(REAL), REAL, SAFE_NOGC_PURE_NOTHROW))

// std.math intrinsics

DEF_D_INTRINSIC (STD_COS, COS, "cos", STD_MATH, FN(P1(REAL), REAL, SAFE_NOGC_PURE_NOTHROW))
DEF_D_INTRINSIC (STD_FABS, FABS, "fabs", STD_MATH, FN(P1(REAL), REAL, SAFE_NOGC_PURE_NOTHROW))
DEF_D_INTRINSIC (STD_LDEXP, LDEXP, "ldexp", STD_MATH, FN(P2(REAL, INT), REAL, SAFE_NOGC_PURE_NOTHROW))
DEF_D_INTRINSIC (STD_RINT, RINT, "rint", STD_MATH, FN(P1(REAL), REAL, SAFE_NOGC_PURE_NOTHROW))
DEF_D_INTRINSIC (STD_RNDTOL, RNDTOL, "rndtol", STD_MATH, FN(P1(REAL), LONG, SAFE_NOGC_PURE_NOTHROW))
DEF_D_INTRINSIC (STD_SIN, SIN, "sin", STD_MATH, FN(P1(REAL), REAL, SAFE_NOGC_PURE_NOTHROW))
DEF_D_INTRINSIC (STD_SQRTF, SQRTF, "sqrt", STD_MATH, FN(P1(FLOAT), FLOAT, SAFE_NOGC_PURE_NOTHROW))
DEF_D_INTRINSIC (STD_SQRT, SQRT, "sqrt", STD_MATH, FN(P1(DOUBLE), DOUBLE, SAFE_NOGC_PURE_NOTHROW))
DEF_D_INTRINSIC (STD_SQRTL, SQRTL, "sqrt", STD_MATH, FN(P1(REAL), REAL, SAFE_NOGC_PURE_NOTHROW))

// core.stdc.stdarg intrinsics

DEF_D_INTRINSIC (VA_ARG, VA_ARG, "va_arg", CORE_VARARG, "void(ref va_list ap, ref T parmn)")
DEF_D_INTRINSIC (C_VA_ARG, C_VA_ARG, "va_arg", CORE_VARARG, "T(ref va_list ap)")
DEF_D_INTRINSIC (VASTART, VASTART, "va_start", CORE_VARARG, "void(out va_list ap, ref T parmn)")


// Remove helper macros
#undef CORE_BITOP
#undef CORE_CHECKEDINT
#undef CORE_VARARG
#undef CORE_MATH
#undef STD_MATH
#undef SAFE_NOGC_PURE_NOTHROW
#undef SAFE_NOGC_NOTHROW
#undef SAFE_PURE_NOTHROW
#undef NOGC_PURE_NOTHROW
#undef PURE_NOTHROW
#undef SYSTEM
#undef BOOL
#undef UBYTE
#undef USHORT
#undef INT
#undef UINT
#undef LONG
#undef ULONG
#undef FLOAT
#undef DOUBLE
#undef REAL
#undef VOID
#undef POINTER
#undef REF
#undef P1
#undef P2
#undef P3
#undef FN
