# -*- mode: makefile -*-

# GDC -- D front-end for GCC
# Copyright (C) 2011, 2012 Free Software Foundation, Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GCC; see the file COPYING3.  If not see
# <http://www.gnu.org/licenses/>.

target_os=$(shell echo $(target) | sed 's/^\([^-]*\)-\([^-]*\)-\(.*\)/\3/')

# Actual names to use when installing a native compiler.
D_INSTALL_NAME = $(shell echo gdc|sed '$(program_transform_name)')
D_TARGET_INSTALL_NAME = $(target_alias)-$(shell echo gdc|sed '$(program_transform_name)')

# This should be configured
ifeq ($(host), $(target))
  D_include_dir = `echo $(exec_prefix) | sed -e 's|^$(prefix)||' -e 's|/[^/]*|/..|g'`/include/d/$(version)
  gcc_d_include_dir = $(libsubdir)/$(unlibsubdir)/..$(D_include_dir)
else
  gcc_d_include_dir = $(libsubdir)/include/d
endif


# Common headers between D1 and D2
D_DMD_H := \
    d/dfrontend/aav.h d/dfrontend/aggregate.h d/dfrontend/aliasthis.h \
    d/dfrontend/arraytypes.h d/dfrontend/async.h d/dfrontend/attrib.h \
    d/dfrontend/complex_t.h d/dfrontend/cond.h d/dfrontend/ctfe.h \
    d/dfrontend/declaration.h d/dfrontend/doc.h d/dfrontend/dsymbol.h \
    d/dfrontend/enum.h d/dfrontend/expression.h d/dfrontend/hdrgen.h \
    d/dfrontend/identifier.h d/dfrontend/import.h \
    d/dfrontend/init.h d/dfrontend/intrange.h d/dfrontend/json.h \
    d/dfrontend/lexer.h d/dfrontend/macro.h \
    d/dfrontend/mars.h d/dfrontend/module.h d/dfrontend/mtype.h \
    d/dfrontend/parse.h d/dfrontend/port.h d/dfrontend/rmem.h \
    d/dfrontend/root.h d/dfrontend/scope.h d/dfrontend/speller.h \
    d/dfrontend/statement.h d/dfrontend/staticassert.h \
    d/dfrontend/stringtable.h d/dfrontend/target.h d/dfrontend/template.h \
    d/dfrontend/utf.h d/dfrontend/version.h \
    d/d-dmd-gcc.h d/longdouble.h d/id.h d/verstr.h

D_TREE_H = $(TREE_H) d/d-tree.def d/d-lang.h d/d-codegen.h \
        d/d-objfile.h d/d-irstate.h d/d-dmd-gcc.h d/d-system.h \
        d/longdouble.h \
        coretypes.h function.h $(VARRAY_H) \
	$(SYSTEM_H) $(CONFIG_H) $(TARGET_H) \
	$(GGC_H) \
	$(srcdir)/../include/hashtab.h $(srcdir)/../include/splay-tree.h \
	$(D_DMD_H)


gcc_d_target_include_dir=$(gcc_d_include_dir)/$(target_noncanonical)

# Name of phobos library
D_LIBPHOBOS = -DLIBPHOBOS=\"gphobos2\"

# May be adjusted in d-incpath.cc
PHOBOS_DIRS = -DD_PHOBOS_DIR=\"$(gcc_d_include_dir)\"
PHOBOS_DIRS += -DD_PHOBOS_TARGET_DIR=\"$(gcc_d_target_include_dir)\"

# Actual names to use when installing a cross-compiler.
D_CROSS_NAME = $(D_INSTALL_NAME)

D d: cc1d$(exeext) d/pkgvars

# Tell GNU make to ignore these if they exist.
.PHONY: D d

D_INCLUDES = -I$(srcdir)/d -I$(srcdir)/d/dfrontend -Id

#ALL_COMPILERFLAGS includes these flags, but they're not valid for c++
#so they should be filtered out.
GDC_OLD_CFLAGS = -Wstrict-prototypes -Wmissing-prototypes -Wold-style-definition -Wc++-compat
GDC_ALL_COMPILERFLAGS = $(filter-out $(GDC_OLD_CFLAGS), $(ALL_COMPILERFLAGS))
ALL_D_COMPILER_FLAGS = $(GDC_ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) \
                        $(INCLUDES) $(D_INCLUDES) $(D_EXTRA_DEFINES)

# D Frontend has slightly relaxed warnings compared to rest of GDC.
DMD_WARN_CFLAGS = -Wno-deprecated -Wstrict-aliasing
DMD_CXXFLAGS = $(filter-out $(WARN_CXXFLAGS), $(GDC_ALL_COMPILERFLAGS)) $(DMD_WARN_CFLAGS)

# %% Ditto
ALL_DMD_COMPILER_FLAGS = $(DMD_CXXFLAGS) $(ALL_CPPFLAGS) \
                        -Id -I$(srcdir)/d/dfrontend -I$(srcdir)/d $(D_EXTRA_DEFINES)

# Create the compiler driver for D.
GDC_OBJS = $(GCC_OBJS) d/d-spec.o
gdc$(exeext): $(GDC_OBJS) $(EXTRA_GCC_OBJS) libcommon-target.a $(LIBDEPS)
	$(CXX) $(ALL_LINKERFLAGS) $(LDFLAGS) -o $@ \
	$(GDC_OBJS) $(EXTRA_GCC_OBJS) libcommon-target.a \
	$(EXTRA_GCC_LIBS) $(LIBS)

# Create a version of the g++ driver which calls the cross-compiler.
gdc-cross$(exeext): gdc$(exeext)
	-rm -f gdc-cross$(exeext)
	cp gdc$(exeext) gdc-cross$(exeext)


# Common sources between D1 and D2
D_DMD_OBJS := \
    d/aav.dmd.o d/access.dmd.o d/aliasthis.dmd.o d/array.dmd.o \
    d/arrayop.dmd.o d/async.dmd.o d/attrib.dmd.o d/cast.dmd.o d/class.dmd.o \
    d/clone.dmd.o d/cond.dmd.o d/constfold.dmd.o d/ctfeexpr.dmd.o \
    d/declaration.dmd.o d/delegatize.dmd.o d/doc.dmd.o d/dsymbol.dmd.o \
    d/dump.dmd.o d/entity.dmd.o d/enum.dmd.o d/expression.dmd.o d/func.dmd.o \
    d/hdrgen.dmd.o d/identifier.dmd.o \
    d/imphint.dmd.o d/import.dmd.o d/init.dmd.o d/inline.dmd.o \
    d/interpret.dmd.o d/json.dmd.o d/lexer.dmd.o \
    d/macro.dmd.o d/mangle.dmd.o d/mars.dmd.o d/mtype.dmd.o d/module.dmd.o \
    d/opover.dmd.o d/optimize.dmd.o d/parse.dmd.o d/rmem.dmd.o d/root.dmd.o \
    d/sapply.dmd.o d/scope.dmd.o d/speller.dmd.o d/statement.dmd.o \
    d/staticassert.dmd.o d/stringtable.dmd.o d/struct.dmd.o d/template.dmd.o \
    d/utf.dmd.o d/argtypes.dmd.o d/builtin.dmd.o d/traits.dmd.o \
    d/intrange.dmd.o d/cppmangle.dmd.o d/apply.dmd.o d/canthrow.dmd.o \
    d/sideeffect.dmd.o d/unittests.dmd.o d/version.dmd.o

D_GENERATED_SRCS = d/id.c d/id.h d/impcnvtab.c
D_GENERATED_OBJS = d/id.gen.o d/impcnvtab.gen.o
D_GLUE_OBJS = d/d-lang.glue.o d/d-decls.glue.o d/d-codegen.glue.o \
              d/d-objfile.glue.o d/d-irstate.glue.o \
              d/d-convert.glue.o d/d-todt.glue.o d/d-longdouble.glue.o \
              d/d-gt.cglue.o d/d-builtins.cglue.o d/d-asmstmt.glue.o \
              d/d-incpath.glue.o d/d-ctype.glue.o d/d-elem.glue.o \
              d/d-toir.glue.o d/d-typinf.glue.o d/d-port.glue.o \
              d/d-target.glue.o

# ALL_D_COMPILER_FLAGS causes issues -- c++ <complex.h> instead of C <complex.h>
# Not all DMD sources depend on d-dmd-gcc.h
d/%.dmd.o: $(srcdir)/d/dfrontend/%.c $(D_DMD_H) d/d-confdefs.h
	$(CXX) $(ALL_DMD_COMPILER_FLAGS) -o d/$*.dmd.o -c $<

# For generator programs.
d/%.dmdgen.o: $(srcdir)/d/dfrontend/%.c
	$(CXX_FOR_BUILD) $(ALL_DMD_COMPILER_FLAGS) -o d/$*.dmdgen.o -c $<

d/%.gen.o: d/%.c
	$(CXX) $(ALL_DMD_COMPILER_FLAGS)  -o d/$*.gen.o -c $<

d/%.glue.o: $(srcdir)/d/%.cc $(D_TREE_H)
	$(CXX) $(ALL_D_COMPILER_FLAGS) -o d/$*.glue.o -c $<

d/%.cglue.o: $(srcdir)/d/%.c $(D_TREE_H)
	$(CXX) $(ALL_D_COMPILER_FLAGS) -DGCC_SAFE_DMD=1 -o d/$*.cglue.o -c $<

d/impcvgen: d/impcnvgen.dmdgen.o
	$(CXX_FOR_BUILD) $(ALL_D_COMPILER_FLAGS) $(BUILD_LDFLAGS) -o $@ $^

d/idgen: d/idgen.dmdgen.o
	$(CXX_FOR_BUILD) $(ALL_D_COMPILER_FLAGS) $(BUILD_LDFLAGS)  -o $@ $^

d/impcnvtab.c: d/impcvgen
	cd d && ./impcvgen

d/id.c: d/idgen
	cd d && ./idgen
# idgen also generates id.h; just verify id.h exists
d/id.h: d/id.c

d/verstr.h: d/VERSION
	cat $^ > $@

d/d-confdefs.h: d/Make-lang.in
	#echo "#define D_PHOBOS_DIR \""$(gcc_d_include_dir)"\"" > $@
	#echo "#define D_PHOBOS_TARGET_DIR \""$(gcc_d_target_include_dir)"\"" >> $@
	$(srcdir)/d/target-ver-syms.sh $(target) >> $@

d/d-incpath.glue.o: d/d-incpath.cc $(D_TREE_H) d/d-confdefs.h
	$(CXX) $(ALL_D_COMPILER_FLAGS) $(PHOBOS_DIRS) -DGCC_SAFE_DMD=1 -o $@ -c $<


d/id.gen.o: d/id.c $(D_DMD_H)
d/impcnvtab.gen.o: d/impcnvtab.c $(D_DMD_H)
d/d-lang.glue.o: d/d-lang.cc $(D_TREE_H) d/d-confdefs.h options.h
d/d-irstate.glue.o: d/d-irstate.cc $(D_TREE_H)
d/d-codegen.glue.o: d/d-codegen.cc $(D_TREE_H)
d/d-decls.glue.o: d/d-decls.cc $(D_TREE_H)
d/d-ctype.glue.o: d/d-ctype.cc $(D_TREE_H)
d/d-elem.glue.o: d/d-elem.cc $(D_TREE_H)
d/d-toir.glue.o: d/d-toir.cc $(D_TREE_H)
d/d-convert.glue.o: d/d-convert.cc $(D_TREE_H)
d/d-todt.glue.o: d/d-todt.cc $(D_TREE_H)
d/d-typinf.glue.o: d/d-typinf.cc $(D_TREE_H)
d/d-longdouble.glue.o: d/d-longdouble.cc d/longdouble.h $(D_TREE_H)
d/d-port.glue.o: d/d-port.cc d/dfrontend/port.h $(D_TREE_H)
d/d-asmstmt.glue.o: d/d-asmstmt.cc $(D_TREE_H)
d/d-gt.cglue.o: d/d-gt.c $(D_TREE_H)
d/d-builtins.cglue.o: d/d-builtins.c $(D_TREE_H)


d/d-spec.o: $(srcdir)/d/d-spec.c $(SYSTEM_H) coretypes.h $(TM_H) $(GCC_H) \
    $(CONFIG_H) $(OPTS_H)
	(SHLIB='$(SHLIB)'; \
	$(CXX) -c $(ALL_D_COMPILER_FLAGS) $(DRIVER_DEFINES) \
		$(D_LIBPHOBOS) $(INCLUDES) -o $@ $(srcdir)/d/d-spec.c)

D_BORROWED_C_OBJS = attribs.o

d_OBJS = $(D_BORROWED_C_OBJS) $(D_GLUE_OBJS)

D_ALL_OBJS = $(D_GENERATED_OBJS) $(D_DMD_OBJS) $(d_OBJS)

cc1d$(exeext): $(D_ALL_OBJS) $(BACKEND) $(LIBDEPS)
	$(CXX) $(ALL_LINKERFLAGS) $(LDFLAGS) -o $@ \
		$(D_ALL_OBJS) $(BACKEND) $(LIBS) $(BACKENDLIBS)


# Documentation.

D_TEXI_FILES = \
	d/gdc.texi \
	$(gcc_docdir)/include/fdl.texi \
	$(gcc_docdir)/include/gpl_v3.texi \
	$(gcc_docdir)/include/gcc-common.texi \
	gcc-vers.texi

doc/gdc.info: $(D_TEXI_FILES)
	if test "x$(BUILD_INFO)" = xinfo; then \
	    rm -f doc/gdc.info*; \
	    $(MAKEINFO) $(MAKEINFOFLAGS) -I $(gcc_docdir) \
		-I $(gcc_docdir)/include -o $@ $<; \
	else true; fi

doc/gdc.dvi: $(D_TEXI_FILES)
	$(TEXI2DVI) -I $(abs_docdir) -I $(abs_docdir)/include -o $@ $<

doc/gdc.pdf: $(D_TEXI_FILES)
	$(TEXI2PDF) -I $(abs_docdir) -I $(abs_docdir)/include -o $@ $<

$(build_htmldir)/d/index.html: $(D_TEXI_FILES)
	$(mkinstalldirs) $(@D)
	rm -f $(@D)/*
	$(TEXI2HTML) -I $(gcc_docdir) -I $(gcc_docdir)/include \
		-I $(srcdir)/d -o $(@D) $<

.INTERMEDIATE: gdc.pod

gdc.pod: d/gdc.texi
	-$(TEXI2POD) -D gdc < $< > $@

# Build hooks:

d.all.build: gdc$(exeext) cc1d$(exeext)
d.all.cross: gdc-cross$(exeext)
d.start.encap: gdc$(exeext)
d.rest.encap:
d.info: doc/gdc.info
d.srcinfo: doc/gdc.info
	-cp -p $^ $(srcdir)/doc
d.srcextra:
d.dvi: doc/gdc.dvi
d.pdf: doc/gdc.pdf
d.html: $(build_htmldir)/d/index.html
d.man: doc/gdc.1
d.srcman: doc/gdc.1
	cp -p $^ $(srcdir)/doc


# Install hooks:

d.install-normal:
d.install-plugin:
d.install-common: installdirs
	-rm -f $(DESTDIR)$(bindir)/$(D_INSTALL_NAME)$(exeext)
	$(INSTALL_PROGRAM) gdc$(exeext) $(DESTDIR)$(bindir)/$(D_INSTALL_NAME)$(exeext)
	-chmod a+x $(DESTDIR)$(bindir)/$(D_INSTALL_NAME)$(exeext)
	-if [ -f cc1d$(exeext) ] ; then \
	  if [ -f gdc-cross$(exeext) ] ; then \
	    if [ -d $(DESTDIR)$(gcc_tooldir)/bin/. ] ; then \
	      rm -f $(DESTDIR)$(gcc_tooldir)/bin/gdc$(exeext); \
	      $(INSTALL_PROGRAM) gdc-cross$(exeext) $(DESTDIR)$(gcc_tooldir)/bin/gdc$(exeext); \
	    else true; fi; \
	  else \
	    rm -f $(DESTDIR)$(bindir)/$(D_TARGET_INSTALL_NAME)$(exeext); \
	    ( cd $(DESTDIR)$(bindir) && \
	      $(LN) $(D_INSTALL_NAME)$(exeext) $(D_TARGET_INSTALL_NAME)$(exeext) ); \
	  fi ; \
	fi

d.install-info: $(DESTDIR)$(infodir)/gdc.info

d.install-pdf: doc/gdc.pdf
	@$(NORMAL_INSTALL)
	test -z "$(pdfdir)" || $(mkinstalldirs) "$(DESTDIR)$(pdfdir)/gcc"
	@for p in doc/gdc.pdf; do \
	    if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	    f=$(pdf__strip_dir) \
	    echo " $(INSTALL_DATA) '$$d$$p' '$(DESTDIR)$(pdfdir)/gcc/$$f'"; \
	    $(INSTALL_DATA) "$$d$$p" "$(DESTDIR)$(pdfdir)/gcc/$$f"; \
	done

d.install-html: $(build_htmldir)/d
	@$(NORMAL_INSTALL)
	test -z "$(htmldir)" || $(mkinstalldirs) "$(DESTDIR)$(htmldir)"
	@for p in $(build_htmldir)/d; do \
	    if test -f "$$p" || test -d "$$p"; then d=""; else d="$(srcdir)/"; fi; \
	    f=$(html__strip_dir) \
	    if test -d "$$d$$p"; then \
		echo " $(mkinstalldirs) '$(DESTDIR)$(htmldir)/$$f'"; \
		$(mkinstalldirs) "$(DESTDIR)$(htmldir)/$$f" || exit 1; \
		echo " $(INSTALL_DATA) '$$d$$p'/* '$(DESTDIR)$(htmldir)/$$f'"; \
		$(INSTALL_DATA) "$$d$$p"/* "$(DESTDIR)$(htmldir)/$$f"; \
	    else \
		echo " $(INSTALL_DATA) '$$d$$p' '$(DESTDIR)$(htmldir)/$$f'"; \
		$(INSTALL_DATA) "$$d$$p" "$(DESTDIR)$(htmldir)/$$f"; \
	    fi; \
        done

d.install-man: $(DESTDIR)$(man1dir)/$(D_INSTALL_NAME)$(man1ext)

$(DESTDIR)$(man1dir)/$(D_INSTALL_NAME)$(man1ext): doc/gdc.1 installdirs
	-rm -f $@
	-$(INSTALL_DATA) $< $@
	-chmod a-x $@

d.uninstall:
	-rm -rf $(DESTDIR)$(bindir)/$(D_INSTALL_NAME)$(exeext)
	-rm -rf $(DESTDIR)$(man1dir)/$(D_INSTALL_NAME)$(man1ext)

d.mostlyclean:
	-rm -f d/*$(objext)
	-rm -f d/*$(coverageexts)
	-rm -f $(D_GENERATED_SRCS)
# shouldn't this do something?
d.clean:
d.distclean:
	-rm -f d/config.status
	-rm -f d/Makefile
d.extraclean:
d.maintainer-clean:


# Stage hooks:
# The main makefile has already created stage?/d.

d.stage1: stage1-start
	-mv d/*$(objext) stage1/d
d.stage2: stage2-start
	-mv d/*$(objext) stage2/d
d.stage3: stage3-start
	-mv d/*$(objext) stage3/d
d.stage4: stage4-start
	-mv d/*$(objext) stage4/d
d.stageprofile: stageprofile-start
	-mv d/*$(objext) stageprofile/d
d.stagefeedback: stagefeedback-start
	-mv d/*$(objext) stagefeedback/d

# 'make check' in gcc/ looks for check-d, as do all toplevel D-related
# check targets.  However, our DejaGNU framework requires 'check-gdc' as its
# entry point.  We feed the former to the latter here.
check-d: check-gdc
# List of targets that can use the generic check- rule and its // variant.
lang_checks += check-gdc
lang_checks_parallelized += check-gdc
# For description see comment above check_gcc_parallelize in gcc/Makefile.in.
check_gdc_parallelize = d_do_test.exp=runnable/*

d/pkgvars: Makefile
	@rm -f $@
	@echo "build=$(build)" >> $@
	@echo "host=$(host)" >> $@
	@echo "target=$(target)" >> $@
	@echo "target_alias=$(target_noncanonical)" >> $@
	@echo "gcc_version=$(version)" >> $@
	@echo "srcdir=$(srcdir)" >> $@
	@echo "prefix=$(prefix)" >> $@
	@echo "exeext=$(exeext)" >> $@
