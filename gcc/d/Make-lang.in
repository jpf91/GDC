# -*- mode: makefile -*-

# GDC -- D front-end for GCC
# Copyright (C) 2011-2015 Free Software Foundation, Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GCC; see the file COPYING3.  If not see
# <http://www.gnu.org/licenses/>.

# This file provides the language dependent support in the main Makefile.

# Installation name.

D_INSTALL_NAME = $(shell echo gdc|sed '$(program_transform_name)')
D_TARGET_INSTALL_NAME = $(target_noncanonical)-$(shell echo gdc|sed '$(program_transform_name)')

# Name of phobos library
D_LIBPHOBOS = -DLIBPHOBOS=\"gphobos2\"

# The name for selecting d in LANGUAGES.
d: cc1d$(exeext)

# Tell GNU make to ignore these if they exist.
.PHONY: d

# Include the dfrontend and build directories for headers.
D_INCLUDES = -I$(srcdir)/d -I$(srcdir)/d/dfrontend -Id

# Create the compiler driver for D.
CFLAGS-d/d-spec.o += $(DRIVER_DEFINES) $(D_LIBPHOBOS)

GDC_OBJS = $(GCC_OBJS) d/d-spec.o
gdc$(exeext): $(GDC_OBJS) $(EXTRA_GCC_OBJS) libcommon-target.a $(LIBDEPS)
	+$(LINKER) $(ALL_LINKERFLAGS) $(LDFLAGS) -o $@ \
	$(GDC_OBJS) $(EXTRA_GCC_OBJS) libcommon-target.a \
	$(EXTRA_GCC_LIBS) $(LIBS)

# Create a version of the gdc driver which calls the cross-compiler.
gdc-cross$(exeext): gdc$(exeext)
	-rm -f gdc-cross$(exeext)
	cp gdc$(exeext) gdc-cross$(exeext)

# Filter out pedantic and virtual overload warnings.
d-warn = $(filter-out -pedantic -Woverloaded-virtual, $(STRICT_WARN))

# D Frontend has slightly relaxed warnings compared to rest of GDC.
DMD_WARN_CXXFLAGS = -Wno-deprecated -Wstrict-aliasing -Wuninitialized
DMD_COMPILE = $(subst $(WARN_CXXFLAGS), $(DMD_WARN_CXXFLAGS), $(COMPILE))
DMDGEN_COMPILE = $(subst $(COMPILER), $(COMPILER_FOR_BUILD), $(DMD_COMPILE))

# D Frontend object files.
D_DMD_OBJS := \
    d/argtypes.o d/aav.o d/access.o d/aliasthis.o \
    d/apply.o d/arrayop.o d/attrib.o \
    d/canthrow.o d/cast.o d/checkedint.o d/class.o \
    d/clone.o d/cond.o d/constfold.o d/cppmangle.o \
    d/ctfeexpr.o d/declaration.o d/delegatize.o d/doc.o \
    d/dsymbol.o d/entity.o d/enum.o d/escape.o \
    d/expression.o d/file.o d/filename.o d/func.o \
    d/hdrgen.o d/identifier.o d/imphint.o d/import.o \
    d/init.o d/inline.o d/interpret.o d/intrange.o \
    d/json.o d/lexer.o d/macro.o d/mangle.o \
    d/mtype.o d/module.o d/nogc.o d/nspace.o \
    d/object.o d/opover.o d/optimize.o d/outbuffer.o \
    d/parse.o d/rmem.o d/sapply.o d/scope.o \
    d/sideeffect.o d/speller.o d/statement.o \
    d/staticassert.o d/stringtable.o d/struct.o \
    d/template.o d/tokens.o d/traits.o d/unittests.o \
    d/utf.o d/version.o

# D Frontend generated files.
D_GENERATED_SRCS = d/id.c d/id.h d/impcnvtab.c
D_GENERATED_OBJS = d/id.o d/impcnvtab.o

# D Glue object files.
D_GLUE_OBJS = d/d-attribs.o d/d-lang.o d/d-decls.o \
              d/d-codegen.o d/d-objfile.o \
              d/d-convert.o d/d-todt.o d/d-longdouble.o \
              d/d-builtins.o d/d-incpath.o d/types.o \
              d/d-elem.o d/toir.o d/d-typinf.o \
              d/d-port.o d/d-target.o d/d-glue.o

# Generated programs.
d/idgen: d/idgen.dmdgen.o
	+$(LINKER_FOR_BUILD) $(BUILD_LINKER_FLAGS) $(BUILD_LDFLAGS)  -o $@ $^

d/impcvgen: d/impcnvgen.dmdgen.o
	+$(LINKER_FOR_BUILD) $(BUILD_LINKER_FLAGS) $(BUILD_LDFLAGS) -o $@ $^

# Generated sources.
d/id.c: d/idgen
	cd d && ./idgen

# idgen also generates id.h; just verify id.h exists.
d/id.h: d/id.c

d/impcnvtab.c: d/impcvgen
	cd d && ./impcvgen

d/verstr.h: d/VERSION
	cat $^ > $@

# Override build rules for D frontend.
d/%.o: d/dfrontend/%.c $(D_GENERATED_SRCS) d/verstr.h
	$(DMD_COMPILE) $(D_INCLUDES) $<
	$(POSTCOMPILE)

d/%.dmdgen.o: $(srcdir)/d/dfrontend/%.c
	$(DMDGEN_COMPILE) $(D_INCLUDES) $<
	$(POSTCOMPILE)

CFLAGS-d/id.o += $(D_INCLUDES)
CFLAGS-d/impcnvtab.o += $(D_INCLUDES)

# All language-specific object files for D.
D_ALL_OBJS = $(D_DMD_OBJS) $(D_GENERATED_OBJS) $(D_GLUE_OBJS)

d_OBJS = $(D_ALL_OBJS) d/d-spec.o

cc1d$(exeext): $(D_ALL_OBJS) attribs.o $(BACKEND) $(LIBDEPS)
	+$(LLINKER) $(ALL_LINKERFLAGS) $(LDFLAGS) -o $@ \
		$(D_ALL_OBJS) attribs.o $(BACKEND) $(LIBS) $(BACKENDLIBS)

# Documentation.

D_TEXI_FILES = \
	d/gdc.texi \
	$(gcc_docdir)/include/fdl.texi \
	$(gcc_docdir)/include/gpl_v3.texi \
	$(gcc_docdir)/include/gcc-common.texi \
	gcc-vers.texi

doc/gdc.info: $(D_TEXI_FILES)
	if test "x$(BUILD_INFO)" = xinfo; then \
	    rm -f doc/gdc.info*; \
	    $(MAKEINFO) $(MAKEINFOFLAGS) -I $(gcc_docdir) \
		-I $(gcc_docdir)/include -o $@ $<; \
	else true; fi

doc/gdc.dvi: $(D_TEXI_FILES)
	$(TEXI2DVI) -I $(abs_docdir) -I $(abs_docdir)/include -o $@ $<

doc/gdc.pdf: $(D_TEXI_FILES)
	$(TEXI2PDF) -I $(abs_docdir) -I $(abs_docdir)/include -o $@ $<

$(build_htmldir)/d/index.html: $(D_TEXI_FILES)
	$(mkinstalldirs) $(@D)
	rm -f $(@D)/*
	$(TEXI2HTML) -I $(gcc_docdir) -I $(gcc_docdir)/include \
		-I $(srcdir)/d -o $(@D) $<

.INTERMEDIATE: gdc.pod

gdc.pod: d/gdc.texi
	-$(TEXI2POD) -D gdc < $< > $@

# Build hooks.

d.all.cross: gdc-cross$(exeext)
d.start.encap: gdc$(exeext)
d.rest.encap:
d.info: doc/gdc.info
d.dvi: doc/gdc.dvi
d.pdf: doc/gdc.pdf
d.html: $(build_htmldir)/d/index.html
d.srcinfo: doc/gdc.info
	-cp -p $^ $(srcdir)/doc
d.srcextra:

d.tags: force
	cd $(srcdir)/d; \
	etags -o TAGS.sub *.c *.cc *.h dfrontend/*.h dfrontend/*.c; \
	etags --include TAGS.sub --include ../TAGS.sub

d.man: doc/gdc.1
d.srcman: doc/gdc.1
	cp -p $^ $(srcdir)/doc

# Install hooks.

d.install-common: installdirs
	-rm -f $(DESTDIR)$(bindir)/$(D_INSTALL_NAME)$(exeext)
	$(INSTALL_PROGRAM) gdc$(exeext) $(DESTDIR)$(bindir)/$(D_INSTALL_NAME)$(exeext)
	-if test -f cc1d$(exeext); then \
	  if test -f gdc-cross$(exeext); then \
	    :; \
	  else \
	    rm -f $(DESTDIR)$(bindir)/$(D_TARGET_INSTALL_NAME)$(exeext); \
	    ( cd $(DESTDIR)$(bindir) && \
	      $(LN) $(D_INSTALL_NAME)$(exeext) $(D_TARGET_INSTALL_NAME)$(exeext) ); \
	  fi; \
	fi

d.install-plugin:

d.install-info: $(DESTDIR)$(infodir)/gdc.info

d.install-pdf: doc/gdc.pdf
	@$(NORMAL_INSTALL)
	test -z "$(pdfdir)" || $(mkinstalldirs) "$(DESTDIR)$(pdfdir)/gcc"
	@for p in doc/gdc.pdf; do \
	    if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	    f=$(pdf__strip_dir) \
	    echo " $(INSTALL_DATA) '$$d$$p' '$(DESTDIR)$(pdfdir)/gcc/$$f'"; \
	    $(INSTALL_DATA) "$$d$$p" "$(DESTDIR)$(pdfdir)/gcc/$$f"; \
	done

d.install-html: $(build_htmldir)/d
	@$(NORMAL_INSTALL)
	test -z "$(htmldir)" || $(mkinstalldirs) "$(DESTDIR)$(htmldir)"
	@for p in $(build_htmldir)/d; do \
	    if test -f "$$p" || test -d "$$p"; then d=""; else d="$(srcdir)/"; fi; \
	    f=$(html__strip_dir) \
	    if test -d "$$d$$p"; then \
		echo " $(mkinstalldirs) '$(DESTDIR)$(htmldir)/$$f'"; \
		$(mkinstalldirs) "$(DESTDIR)$(htmldir)/$$f" || exit 1; \
		echo " $(INSTALL_DATA) '$$d$$p'/* '$(DESTDIR)$(htmldir)/$$f'"; \
		$(INSTALL_DATA) "$$d$$p"/* "$(DESTDIR)$(htmldir)/$$f"; \
	    else \
		echo " $(INSTALL_DATA) '$$d$$p' '$(DESTDIR)$(htmldir)/$$f'"; \
		$(INSTALL_DATA) "$$d$$p" "$(DESTDIR)$(htmldir)/$$f"; \
	    fi; \
        done

d.install-man: $(DESTDIR)$(man1dir)/$(D_INSTALL_NAME)$(man1ext)

$(DESTDIR)$(man1dir)/$(D_INSTALL_NAME)$(man1ext): doc/gdc.1 installdirs
	-rm -f $@
	-$(INSTALL_DATA) $< $@
	-chmod a-x $@

d.uninstall:
	-rm -rf $(DESTDIR)$(bindir)/$(D_INSTALL_NAME)$(exeext)
	-rm -rf $(DESTDIR)$(man1dir)/$(D_INSTALL_NAME)$(man1ext)
	-rm -rf $(DESTDIR)$(bindir)/$(D_TARGET_INSTALL_NAME)$(exeext)
	-rm -rf $(DESTDIR)$(infodir)/gdc.info*

# Clean hooks.

d.mostlyclean:
	-rm -f d/*$(objext)
	-rm -f d/*$(coverageexts)
	-rm -f $(D_GENERATED_SRCS) verstr.h
	-rm -f d/gdc$(exeext) gdc-cross$(exeext) d/cc1d$(exeext)
d.clean:
d.distclean:
d.maintainer-clean:
	-rm -f $(docobjdir)/gdc.1

# Stage hooks.

d.stage1: stage1-start
	-mv d/*$(objext) stage1/d
d.stage2: stage2-start
	-mv d/*$(objext) stage2/d
d.stage3: stage3-start
	-mv d/*$(objext) stage3/d
d.stage4: stage4-start
	-mv d/*$(objext) stage4/d
d.stageprofile: stageprofile-start
	-mv d/*$(objext) stageprofile/d
d.stagefeedback: stagefeedback-start
	-mv d/*$(objext) stagefeedback/d

# 'make check' in gcc/ looks for check-d, as do all toplevel D-related
# check targets.  However, our DejaGNU framework requires 'check-gdc' as its
# entry point.  We feed the former to the latter here.
check-d: check-gdc
lang_checks += check-gdc
lang_checks_parallelized += check-gdc
check_gdc_parallelize = 10
